plugins {
    id 'com.android.application'
    id 'jacoco'
}

android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "fr.delcey.mareu"
        minSdkVersion 21
        targetSdkVersion 32
        versionCode 1
        versionName '1.0'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunnerArguments useTestStorageService: 'true'
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
        }

        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        animationsDisabled = true
    }

    compileOptions {
        coreLibraryDesugaringEnabled true
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    tasks.withType(Test) {
        jacoco {
            includeNoLocationClasses = true
            excludes = ['jdk.internal.*']
        }
    }
}

dependencies {
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'

    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.android.material:material:1.6.1'

    testImplementation 'junit:junit:4.13.2'
    // Helps testing livedata : InstantTaskExecutorRule, for example
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    // Helps mocking objects (Mockito.mock() or Mockito.spy())
    testImplementation 'org.mockito:mockito-core:4.6.1'
    // Helps asserting (lists for example)
    testImplementation 'org.hamcrest:hamcrest-library:2.2'

    // Allow use of "RecyclerViewActions" for example : https://developer.android.com/reference/androidx/test/espresso/contrib/package-summary
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0'
    // Base dependency for Espresso
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    androidTestUtil 'androidx.test.services:test-services:1.4.1'
    debugImplementation 'androidx.fragment:fragment-testing:1.5.3'
}

// prints detailed depreciation warning during compilation
tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
    options.compilerArgs += ['-Xlint:unchecked']
}

// open JaCoCo report after generation
def openReport(htmlOutDir) {
    final reportPath = "$htmlOutDir\\index.html"

    println "HTML Report: $reportPath"

    def os = org.gradle.internal.os.OperatingSystem.current()
    if (os.isWindows()) {
        exec { commandLine 'cmd', '/c', "start $reportPath" }
    } else if (os.isMacOsX()) {
        exec { commandLine 'open', "$reportPath" }
    } else if (os.isLinux()) {
        try {
            exec { commandLine 'xdg-open', "$reportPath" }
        } catch (Exception ignored) {
            if (localProperties.containsKey("linux-html-cmd")) {
                exec { commandLine properties.get("linux-html-cmd"), "$reportPath" }
            } else {
                println "'linux-html-cmd' property could not be found in 'local.properties'"
            }
        }
    }
}

// Configure JaCoCo
android.applicationVariants.all { variant ->
    def capitalizedVariantName = variant.name.capitalize()
    task(
        "jacoco${capitalizedVariantName}Report",
        type: JacocoReport,
        dependsOn: ["test${capitalizedVariantName}UnitTest", "create${capitalizedVariantName}CoverageReport"]
    ) {
        group 'Reporting'
        description "Generate ${capitalizedVariantName} Jacoco coverage reports."

        def htmlOutDir = layout.buildDirectory.dir("reports/jacoco/$name/html").get().asFile

        doLast {
            openReport htmlOutDir
        }

        reports {
            xml.getRequired().set(true)
            html {
                getRequired().set(true)
                destination htmlOutDir
            }
        }

        def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*'
        ]

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, excludes: fileFilter))
        getExecutionData().setFrom(fileTree(
            dir: "$buildDir",
            includes: [
                "outputs/unit_test_code_coverage/debugUnitTest/test${capitalizedVariantName}UnitTest.exec",
                "outputs/code_coverage/${variant.name}AndroidTest/connected/**/*.ec"
            ]
        ))
    }
}